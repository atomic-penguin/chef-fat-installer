#!/usr/bin/env bash

# rvm : Ruby enVironment Manager
# http://rvm.beginrescueend.com
# http://github.com/wayneeseguin/rvm

# Is RVM loaded as a shell function already?

export HOME="${HOME%%+(\/)}" # Remove trailing slashes if they exist on HOME

if [[ ${rvm_ignore_rvmrc:-0} -eq 0 ]]; then
  for rvmrc in /etc/rvmrc "$HOME/.rvmrc" ; do
    if [[ -f "$rvmrc" ]] ; then
      if \grep -q '^\s*rvm .*$' $rvmrc ; then
        printf "\nError: $rvmrc is for rvm settings only.\nrvm CLI may NOT be called from within $rvmrc. \nSkipping the loading of $rvmrc"
        return 1
      else
        source "$rvmrc"
      fi
    fi
  done
fi

if [[ -z "${rvm_path:-}" ]] ; then

  # Set the default sandboxed value.
  # TODO: Alter the variable names to make sense
  if [[ -z "${rvm_user_install:-""}" ]]; then

    if [[ $UID -eq 0 || -n "$rvm_prefix" && "$rvm_prefix" != "$HOME"/* ]]; then
      rvm_user_install=0
    else
      rvm_user_install=1
    fi

  fi

  if [[ -z "${rvm_prefix:-""}" ]] ; then

    if [[ "${rvm_user_install:-0}" = "0" ]] ; then

      rvm_prefix="/usr/local/"

    elif [[ -n "$HOME" ]] ; then

      rvm_prefix="$HOME/."

    else

      echo "No \$rvm_prefix was provided and "
      echo "$(id | \sed -e's/^[^(]*(//' -e 's/).*//') has no \$HOME defined."
      echo "Haling loading of RVM."
      rvm_load_rvm=0
    fi

  fi

  # Fix rvm_prefix changes.
  [[ "${rvm_prefix}" != *[/.] && -d "${rvm_prefix/rvm/scripts}" ]]

  rvm_prefix_needs_trailing_slash="$?"

  if [[ "$rvm_prefix" = "/usr/local" || "$rvm_prefix_needs_trailing_slash" = "0" ]]; then

    rvm_prefix="$rvm_prefix/"

  fi

  if [[ -z "${rvm_path:-""}" ]] ; then
    rvm_path="${rvm_prefix}rvm"
  fi

  export rvm_path="${rvm_path%%+(\/)}"

fi

if ! declare -f rvm > /dev/null || [[ ${rvm_reload_flag:-0} -eq 1 ]] ; then

  if [[ -d "$rvm_path" ]] ; then

    true ${rvm_scripts_path:="$rvm_path/scripts"}

    if [[ ${rvm_load_rvm:-1} -eq 1 ]] ; then

      for script in base version selector cd cli override_gem ; do
        if [[ -f "$rvm_scripts_path/$script" ]] ; then
          source "$rvm_scripts_path/$script"
        else
          printf "WARNING: Could not source script '$rvm_scripts_path/$script', file does not exist. RVM will likely not work as expected.\n"
        fi
      done

      rvm_version="$(cat "$rvm_path/VERSION")"

      export rvm_version="${rvm_version/%.}"

      alias rvm-restart="source '${rvm_path}/scripts/rvm'"

      if ! command -v ruby >/dev/null 2>&1 || command -v ruby | \grep -v rvm >/dev/null ; then

        [[ -s "$rvm_environments_path/default" ]] &&
          source "$rvm_environments_path/default"

      fi

      # Makes sure rvm_bin_path is in PATH atleast once.
      __rvm_conditionally_add_bin_path

    else
      printf "\n\$rvm_path ($rvm_path) does not exist."
    fi
  fi
  unset rvm_prefix_needs_trailing_slash rvm_rc_files rvm_gems_cache_path rvm_gems_path rvm_project_rvmrc_default rvm_gemset_separator

fi

case $- in
  *i*)
    if [[ "screen" = $TERM ]]; then
      # Reload the rvmrc, use promptless ensuring shell processes does not
      # prompt if .rvmrc trust value is not stored.
      rvm_promptless=1 __rvm_project_rvmrc
    fi
    ;;
esac

